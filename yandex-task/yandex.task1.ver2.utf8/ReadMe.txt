Версия 2

Тестовое задание для Яндекс
---------------------------

Формулировка задачи.
Необходимо написать консольную программу на C++ под Windows, которую можно будет запустить в нескольких экземплярах. В одном из запущенных экземпляров должен создаться дополнительный поток, называемый "диспетчером". Диспетчер содержит счетчик (int), инициализированный нулем. Раз в секунду диспетчер увеличивает счетчик на единицу и каким-то образом передает строковое значение счетчика всем экземплярам программы (в том числе и тому, в котором он сам запущен). Экземпляры программы получив значение счетчика выводят его на экран.
При закрытии экземпляра программы в котором работает диспетчер, диспетчер должен создаться в другом запущенном экземпляре и продолжить увеличивать счетчик и сообщать об этом оставшимся экземплярам программы.
Программа должна компилироваться одним из компиляторов C++ на выбор: Visual Studio 6.0, Visual Studio 2005, Visual Studio 2008 или бесплатным компилятором из Microsoft Platform SDK
Программа должна работать на одной (работа сразу на всех будет плюсом) из версий 32-х разрядной Windows на выбор: Windows XP, Windows Vista, Windows 7
Можно использовать: WinAPI, MFC, ATL, STL
Нельзя использовать: Qt, boost, COM (в этой задаче он не нужен), loki и другие библиотеки


Описание реализации

В моём решении для передачи значения счётчика используется FileMapping, 
все процессы читают(и записывают) это значение последовательно.
Кроме того, реализация не гарантирует, что все процессы прочитают все значения счетчика.
Одновременно может быть запущено неограниченное кол-во экземпляров программы. Экземпляры программы могут запускаться и завершаться в любой момент.
Используется только WinAPI.
Основные числовые и символьные константы находятся в файле constant.h
Класс helper содержит вспомогательные функции.


Алгоритм работы.

Функция main создает поток диспетчера (Dispatcher), затем запускает цикл чтения значения счетчика(Receiver).
Receiver находится в состоянии ожидания(с тайм-аутом) события CounterWriteEvent.
Поток диспетчера создает DispatcherMutex и, если другой диспетчер не захватил мютекс, создает FileMapping, через который передает значение счетчика. В случае, если мютекс уже создан, диспетчер переходит в состояние ожидания. Как только мютекс освободится(предыдущий диспетчер завершился) диспетчер читает значение счетчика из FileMapping и запускает цикл записи новых значений счетчика.
После записи очередного значения диспетчер устанавливает событие (CounterWriteEvent) и Receiver выводит значение счетчика на экран.


Изменения.

Версия 2
Для интервала времени (1 сек.) используется waitable timer (вместо sleep в первой версии). Это позволяет исключить влияние на этот интервал времени чтения/записи счетчика. Таким образом интервал не зависит от кол-ва экземпляров программы и их быстродействия.
